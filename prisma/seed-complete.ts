import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  // Cr√©er un architecte de d√©monstration
  const hashedPassword = await bcrypt.hash('demo123', 10)
  
  const demoArchitect = await prisma.architect.create({
    data: {
      id: 'demo-architect-id',
      email: 'demo@architecte.com',
      password: hashedPassword,
      name: 'Architecte D√©mo',
      company: 'Cabinet D√©mo'
    }
  })

  console.log('‚úÖ Architecte d√©mo cr√©√©:', demoArchitect.name)

  // Structure hi√©rarchique compl√®te des pi√®ces
  const roomStructure = [
    {
      category: 'üè° Espaces de vie',
      order: 1,
      rooms: [
        'Entr√©e / hall',
        'Salon',
        'S√©jour',
        'Salle √† manger',
        'Cuisine ouverte',
        'Cuisine ferm√©e',
        'Coin repas',
        'V√©randa / jardin d\'hiver',
        'Pi√®ce de r√©ception',
        'Salle de jeux / salle TV',
        'Biblioth√®que',
        'Home cin√©ma'
      ]
    },
    {
      category: 'üõèÔ∏è Espaces nuit',
      order: 2,
      rooms: [
        'Chambre principale',
        'Suite parentale',
        'Chambre d\'amis',
        'Chambre d\'enfant',
        'Chambre d\'adolescent',
        'Dortoir',
        'Mezzanine / coin nuit'
      ]
    },
    {
      category: 'üõÅ Espaces d\'eau',
      order: 3,
      rooms: [
        'Salle de bains principale',
        'Salle d\'eau',
        'Douche d\'appoint',
        'WC ind√©pendant',
        'Buanderie / lingerie',
        'Espace bien-√™tre'
      ]
    },
    {
      category: 'üßë‚Äçüíº Espaces de travail / techniques',
      order: 4,
      rooms: [
        'Bureau principal',
        'Bureau d\'appoint',
        'Atelier',
        'Studio musique / son / vid√©o',
        'Salle informatique / gaming room',
        'Local technique'
      ]
    },
    {
      category: 'üç∑ Espaces de stockage et annexes',
      order: 5,
      rooms: [
        'Cellier / garde-manger',
        'Arri√®re-cuisine',
        'Cave √† vin',
        'Cave alimentaire',
        'Grenier / combles',
        'Dressing ind√©pendant',
        'Placards sous escalier',
        'R√©serve / d√©barras',
        'Local jardin / abri'
      ]
    },
    {
      category: 'üöó Espaces ext√©rieurs',
      order: 6,
      rooms: [
        'Terrasse',
        'Balcon',
        'Patio / cour int√©rieure',
        'Jardin',
        'Cuisine d\'ext√©rieur',
        'Abri de jardin',
        'Piscine',
        'Pool house',
        'Spa ext√©rieur',
        'Carport',
        'Garage',
        'Abri √† v√©los'
      ]
    },
    {
      category: 'üèòÔ∏è Espaces sp√©cifiques',
      order: 7,
      rooms: [
        'Studio ind√©pendant',
        'Chambre d\'h√¥tes / g√Æte',
        'Atelier professionnel / boutique',
        'Salle de sport / fitness',
        'Salle de danse / yoga',
        'Salle de musique',
        'Salle de r√©ception / banquet',
        'Galerie d\'art',
        'Orangerie / serre',
        'Chapelle / espace spirituel',
        'Chambre de service',
        'Logement du personnel'
      ]
    }
  ]

  // Cr√©er les cat√©gories et leurs pi√®ces
  for (const category of roomStructure) {
    // Cr√©er la cat√©gorie principale (parent)
    const parentRoom = await prisma.roomType.create({
      data: {
        name: category.category,
        displayOrder: category.order,
        architectId: demoArchitect.id,
        parentId: null, // Cat√©gorie principale
        active: true
      }
    })

    console.log(`‚úÖ Cat√©gorie cr√©√©e: ${category.category}`)

    // Cr√©er les sous-pi√®ces
    for (let i = 0; i < category.rooms.length; i++) {
      await prisma.roomType.create({
        data: {
          name: category.rooms[i],
          displayOrder: i,
          architectId: demoArchitect.id,
          parentId: parentRoom.id, // Lier √† la cat√©gorie
          active: true
        }
      })
    }

    console.log(`   ‚Üí ${category.rooms.length} pi√®ces cr√©√©es`)
  }

  // Cr√©er quelques questions d'exemple pour le Salon
  const salon = await prisma.roomType.findFirst({
    where: {
      name: 'Salon',
      architectId: demoArchitect.id
    }
  })

  if (salon) {
    await prisma.question.createMany({
      data: [
        {
          roomTypeId: salon.id,
          questionText: 'Quel style pr√©f√©rez-vous pour votre salon ?',
          questionType: 'select',
          optionsJson: JSON.stringify(['Contemporain', 'Classique', 'Industriel', 'Scandinave', 'Boh√®me']),
          required: true,
          displayOrder: 0,
          active: true
        },
        {
          roomTypeId: salon.id,
          questionText: 'Quelle ambiance souhaitez-vous cr√©er ?',
          questionType: 'multiple',
          optionsJson: JSON.stringify(['Chaleureuse', 'Lumineuse', 'Cosy', '√âpur√©e', 'Conviviale']),
          required: false,
          displayOrder: 1,
          active: true
        },
        {
          roomTypeId: salon.id,
          questionText: 'Avez-vous des contraintes particuli√®res ?',
          questionType: 'text',
          optionsJson: null,
          required: false,
          displayOrder: 2,
          active: true
        }
      ]
    })

    console.log('‚úÖ Questions d\'exemple cr√©√©es pour le Salon')
  }

  // Cr√©er quelques photos d'inspiration d'exemple
  await prisma.inspirationPhoto.createMany({
    data: [
      {
        architectId: demoArchitect.id,
        imageUrl: 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800',
        title: 'Salon contemporain lumineux',
        description: 'Un espace ouvert avec des tons neutres',
        tags: JSON.stringify(['contemporain', 'lumineux', 'neutre']),
        roomTypeIds: salon ? JSON.stringify([salon.id]) : null,
        active: true
      },
      {
        architectId: demoArchitect.id,
        imageUrl: 'https://images.unsplash.com/photo-1556912173-46c336c7fd55?w=800',
        title: 'Cuisine moderne ouverte',
        description: 'Cuisine avec √Ælot central et finitions √©pur√©es',
        tags: JSON.stringify(['moderne', '√©pur√©', 'fonctionnel']),
        roomTypeIds: null, // Pas de pi√®ce sp√©cifique
        active: true
      },
      {
        architectId: demoArchitect.id,
        imageUrl: 'https://images.unsplash.com/photo-1540518614846-7eded433c457?w=800',
        title: 'Chambre cosy scandinave',
        description: 'Ambiance chaleureuse avec mat√©riaux naturels',
        tags: JSON.stringify(['scandinave', 'cosy', 'naturel']),
        roomTypeIds: null,
        active: true
      }
    ]
  })

  console.log('‚úÖ 3 photos d\'inspiration cr√©√©es')

  console.log('\nüéâ Base de donn√©es initialis√©e avec succ√®s!')
  console.log(`üìä ${roomStructure.reduce((acc, cat) => acc + cat.rooms.length, 0)} pi√®ces cr√©√©es dans ${roomStructure.length} cat√©gories`)
}

main()
  .catch((e) => {
    console.error('‚ùå Erreur lors de l\'initialisation:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
