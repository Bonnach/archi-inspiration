// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Architect {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  roomTypes         RoomType[]
  inspirationPhotos InspirationPhoto[]
  clientSessions    ClientSession[]

  @@map("architects")
}

model ClientSession {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  architectId String
  status      String   @default("in_progress") // in_progress, completed, abandoned
  createdAt   DateTime @default(now())
  completedAt DateTime?
  updatedAt   DateTime @updatedAt

  // Relations
  architect          Architect           @relation(fields: [architectId], references: [id], onDelete: Cascade)
  clientAnswers      ClientAnswer[]
  photoInteractions  PhotoInteraction[]

  @@map("client_sessions")
}

model RoomType {
  id           String @id @default(cuid())
  name         String
  displayOrder Int    @default(0)
  architectId  String
  active       Boolean @default(true)

  // Relations
  architect         Architect          @relation(fields: [architectId], references: [id], onDelete: Cascade)
  questions         Question[]
  inspirationPhotos InspirationPhoto[]

  @@map("room_types")
}

model Question {
  id           String @id @default(cuid())
  roomTypeId   String
  questionText String
  questionType String // text, select, multiple, range, boolean
  optionsJson  String? // JSON string for select/multiple options
  required     Boolean @default(false)
  displayOrder Int     @default(0)
  active       Boolean @default(true)

  // Relations
  roomType      RoomType       @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  clientAnswers ClientAnswer[]

  @@map("questions")
}

model ClientAnswer {
  id           String   @id @default(cuid())
  sessionId    String
  questionId   String
  answerValue  String
  createdAt    DateTime @default(now())

  // Relations
  session  ClientSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, questionId])
  @@map("client_answers")
}

model InspirationPhoto {
  id          String   @id @default(cuid())
  architectId String
  roomTypeId  String?
  imageUrl    String
  title       String?
  description String?
  tags        String? // JSON array of tags
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  architect         Architect          @relation(fields: [architectId], references: [id], onDelete: Cascade)
  roomType          RoomType?          @relation(fields: [roomTypeId], references: [id], onDelete: SetNull)
  photoInteractions PhotoInteraction[]

  @@map("inspiration_photos")
}

model PhotoInteraction {
  id              String   @id @default(cuid())
  sessionId       String
  photoId         String
  action          String   // like, dislike
  annotationsJson String? // JSON with click coordinates and comments
  createdAt       DateTime @default(now())

  // Relations
  session ClientSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  photo   InspirationPhoto @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([sessionId, photoId])
  @@map("photo_interactions")
}
